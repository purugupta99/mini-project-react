{"ast":null,"code":"import _slicedToArray from \"/home/shell_basher/projects/mini-project-react/messenger-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"/home/shell_basher/projects/mini-project-react/messenger-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/shell_basher/projects/mini-project-react/messenger-app/src/components/MessageList/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\n  query MyQuery{\\n    messages(where: {_or: [{id_receiver: {_eq: \\\"1\\\"}}, {id_sender: {_eq: \\\"1\\\"}}]}, order_by: {send_at: asc}) {\\n      id\\n      text\\n      send_at\\n      user_sender {\\n        id\\n      }\\n    }\\n  }\\n \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\nimport { gql, useQuery } from '@apollo/client';\nimport './MessageList.css';\nvar MY_USER_ID = 'apple'; // const GET_MY_MESSAGES = gql `\n//   query MyQuery ($id_receiver: String!, $id_sender: String!){\n//     messages(where: {_or: [{id_receiver: {_eq: $id_receiver}}, {id_sender: {_eq: $id_sender}}]}, order_by: {send_at: asc}) {\n//       text\n//     }\n//   }\n//  `;\n\nvar GET_MY_MESSAGES = gql(_templateObject());\n\nvar MessageList = function MessageList(props) {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useQuery = useQuery(GET_MY_MESSAGES),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  console.log(data);\n\n  if (loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \" \", React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \" Loading .. \"));\n  }\n\n  if (error) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \" \", React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \" Error \"), \" \", React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \" \", error.message, \" \"), \" \");\n  }\n\n  var tempMessages = data.messages.map(function (messages) {\n    return {\n      id: messages.id,\n      author: messages.user_sender.id,\n      message: messages.text,\n      timestamp: messages.send_at\n    };\n  });\n\n  if (messages == \"\") {\n    setMessages(tempMessages);\n  } // const getMessages = async () => {\n  //    console.log(\"hi\");\n  //    const [addMessages] = useQuery(GET_MY_MESSAGES);\n  //    let messageList = addMessages({variables: {id_receiver: \"1\", id_sender: \"1\"}});\n  //    console.log(messageList);\n  //   //  var tempMessages = [\n  //   //     {\n  //   //       id: 1,\n  //   //       author: 'apple',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 2,\n  //   //       author: 'orange',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 3,\n  //   //       author: 'orange',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 4,\n  //   //       author: 'apple',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 5,\n  //   //       author: 'apple',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 6,\n  //   //       author: 'apple',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 7,\n  //   //       author: 'orange',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 8,\n  //   //       author: 'orange',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 9,\n  //   //       author: 'apple',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 10,\n  //   //       author: 'orange',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //   ]\n\n\n  setMessages(tempMessages); // }\n  // const renderMessages = () => {\n  //   let i = 0;\n  //   let messageCount = messages.length;\n  //   let messageList = [];\n  //   while (i < messageCount) {\n  //     let previous = messages[i - 1];\n  //     let current = messages[i];\n  //     let next = messages[i + 1];\n  //     let isMine = current.author === MY_USER_ID;\n  //     let currentMoment = moment(current.timestamp);\n  //     let prevBySameAuthor = false;\n  //     let nextBySameAuthor = false;\n  //     let startsSequence = true;\n  //     let endsSequence = true;\n  //     let showTimestamp = true;\n  //     if (previous) {\n  //       let previousMoment = moment(previous.timestamp);\n  //       let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n  //       prevBySameAuthor = previous.author === current.author;\n  //       if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n  //         startsSequence = false;\n  //       }\n  //       if (previousDuration.as('hours') < 1) {\n  //         showTimestamp = false;\n  //       }\n  //     }\n  //     if (next) {\n  //       let nextMoment = moment(next.timestamp);\n  //       let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n  //       nextBySameAuthor = next.author === current.author;\n  //       if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n  //         endsSequence = false;\n  //       }\n  //     }\n  //     messageList.push(\n  //       <Message\n  //         key={i}\n  //         isMine={isMine}\n  //         startsSequence={startsSequence}\n  //         endsSequence={endsSequence}\n  //         showTimestamp={showTimestamp}\n  //         data={current}\n  //       />\n  //     );\n  //     // Proceed to the next message.\n  //     i += 1;\n  //   }\n  //   return messageList;\n  // }\n\n  return React.createElement(\"div\", {\n    className: \"message-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    title: \"Conversation Title\",\n    rightItems: [React.createElement(ToolbarButton, {\n      key: \"info\",\n      icon: \"ion-ios-information-circle-outline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"video\",\n      icon: \"ion-ios-videocam\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"phone\",\n      icon: \"ion-ios-call\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    })],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }), React.createElement(Compose, {\n    rightItems: [React.createElement(ToolbarButton, {\n      key: \"photo\",\n      icon: \"ion-ios-camera\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"image\",\n      icon: \"ion-ios-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"audio\",\n      icon: \"ion-ios-mic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"money\",\n      icon: \"ion-ios-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"games\",\n      icon: \"ion-logo-game-controller-b\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"emoji\",\n      icon: \"ion-ios-happy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    })],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208\n    },\n    __self: this\n  }));\n};\n\nexport default MessageList;","map":{"version":3,"sources":["/home/shell_basher/projects/mini-project-react/messenger-app/src/components/MessageList/index.js"],"names":["React","useEffect","useState","Compose","Toolbar","ToolbarButton","Message","moment","gql","useQuery","MY_USER_ID","GET_MY_MESSAGES","MessageList","props","messages","setMessages","data","loading","error","console","log","message","tempMessages","map","id","author","user_sender","text","timestamp","send_at"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AAEA,OAAO,mBAAP;AAEA,IAAMC,UAAU,GAAG,OAAnB,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEC,IAAMC,eAAe,GAAGH,GAAH,mBAArB;;AAaD,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAAA,kBAEKX,QAAQ,CAAC,EAAD,CAFb;AAAA;AAAA,MAEpBY,QAFoB;AAAA,MAEVC,WAFU;;AAAA,kBAGIN,QAAQ,CAACE,eAAD,CAHZ;AAAA,MAGpBK,IAHoB,aAGpBA,IAHoB;AAAA,MAGdC,OAHc,aAGdA,OAHc;AAAA,MAGLC,KAHK,aAGLA,KAHK;;AAK3BC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AACA,MAAIC,OAAJ,EAAa;AACX,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAN,CAAR;AACD;;AACD,MAAIC,KAAJ,EAAW;AACT,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAN,OAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAKA,KAAK,CAACG,OAAX,MAAvB,MAAR;AACD;;AAED,MAAIC,YAAY,GAAGN,IAAI,CAACF,QAAL,CAAcS,GAAd,CAAkB,UAAAT,QAAQ,EAAI;AAC/C,WAAO;AACLU,MAAAA,EAAE,EAAEV,QAAQ,CAACU,EADR;AAELC,MAAAA,MAAM,EAAEX,QAAQ,CAACY,WAAT,CAAqBF,EAFxB;AAGLH,MAAAA,OAAO,EAAEP,QAAQ,CAACa,IAHb;AAILC,MAAAA,SAAS,EAAEd,QAAQ,CAACe;AAJf,KAAP;AAMD,GAPkB,CAAnB;;AASA,MAAIf,QAAQ,IAAI,EAAhB,EAAmB;AACjBC,IAAAA,WAAW,CAACO,YAAD,CAAX;AACD,GAxB0B,CAyB3B;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIP,EAAAA,WAAW,CAACO,YAAD,CAAX,CA/FuB,CAgG3B;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEE,SACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AACE,IAAA,KAAK,EAAC,oBADR;AAEE,IAAA,UAAU,EAAE,CACV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,MAAnB;AAA0B,MAAA,IAAI,EAAC,oCAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADU,EAEV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,kBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFU,EAGV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHU,CAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAcE,oBAAC,OAAD;AAAS,IAAA,UAAU,EAAE,CACnB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,gBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADmB,EAEnB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,eAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFmB,EAGnB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHmB,EAInB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJmB,EAKnB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,4BAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALmB,EAMnB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,eAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANmB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CADF;AAyBH,CAtLD;;AAwLA,eAAeV,WAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\n\nimport { gql, useQuery } from '@apollo/client';\n\nimport './MessageList.css';\n\nconst MY_USER_ID = 'apple';\n\n// const GET_MY_MESSAGES = gql `\n\n//   query MyQuery ($id_receiver: String!, $id_sender: String!){\n//     messages(where: {_or: [{id_receiver: {_eq: $id_receiver}}, {id_sender: {_eq: $id_sender}}]}, order_by: {send_at: asc}) {\n//       text\n//     }\n//   }\n//  `;\n\n const GET_MY_MESSAGES = gql `\n\n  query MyQuery{\n    messages(where: {_or: [{id_receiver: {_eq: \"1\"}}, {id_sender: {_eq: \"1\"}}]}, order_by: {send_at: asc}) {\n      id\n      text\n      send_at\n      user_sender {\n        id\n      }\n    }\n  }\n `;\nconst MessageList = props => {\n\n  const [messages, setMessages] = useState(\"\");\n  const {data, loading, error} = useQuery(GET_MY_MESSAGES);\n\n  console.log(data)\n  if (loading) {\n    return (<div> <h1> Loading .. </h1></div>)\n  }\n  if (error) {\n    return (<div> <h1> Error </h1> <p> {error.message} </p> </div>)\n  }\n  \n  let tempMessages = data.messages.map(messages => {\n    return {\n      id: messages.id,\n      author: messages.user_sender.id,\n      message: messages.text,\n      timestamp: messages.send_at\n    };\n  });\n\n  if (messages == \"\"){\n    setMessages(tempMessages)\n  }\n  // const getMessages = async () => {\n\n  //    console.log(\"hi\");\n\n  //    const [addMessages] = useQuery(GET_MY_MESSAGES);\n  //    let messageList = addMessages({variables: {id_receiver: \"1\", id_sender: \"1\"}});\n\n  //    console.log(messageList);\n  //   //  var tempMessages = [\n  //   //     {\n  //   //       id: 1,\n  //   //       author: 'apple',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 2,\n  //   //       author: 'orange',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 3,\n  //   //       author: 'orange',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 4,\n  //   //       author: 'apple',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 5,\n  //   //       author: 'apple',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 6,\n  //   //       author: 'apple',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 7,\n  //   //       author: 'orange',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 8,\n  //   //       author: 'orange',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 9,\n  //   //       author: 'apple',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 10,\n  //   //       author: 'orange',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //   ]\n      setMessages(tempMessages);\n  // }\n\n  // const renderMessages = () => {\n  //   let i = 0;\n  //   let messageCount = messages.length;\n  //   let messageList = [];\n\n  //   while (i < messageCount) {\n  //     let previous = messages[i - 1];\n  //     let current = messages[i];\n  //     let next = messages[i + 1];\n  //     let isMine = current.author === MY_USER_ID;\n  //     let currentMoment = moment(current.timestamp);\n  //     let prevBySameAuthor = false;\n  //     let nextBySameAuthor = false;\n  //     let startsSequence = true;\n  //     let endsSequence = true;\n  //     let showTimestamp = true;\n\n  //     if (previous) {\n  //       let previousMoment = moment(previous.timestamp);\n  //       let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n  //       prevBySameAuthor = previous.author === current.author;\n        \n  //       if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n  //         startsSequence = false;\n  //       }\n\n  //       if (previousDuration.as('hours') < 1) {\n  //         showTimestamp = false;\n  //       }\n  //     }\n\n  //     if (next) {\n  //       let nextMoment = moment(next.timestamp);\n  //       let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n  //       nextBySameAuthor = next.author === current.author;\n\n  //       if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n  //         endsSequence = false;\n  //       }\n  //     }\n\n  //     messageList.push(\n  //       <Message\n  //         key={i}\n  //         isMine={isMine}\n  //         startsSequence={startsSequence}\n  //         endsSequence={endsSequence}\n  //         showTimestamp={showTimestamp}\n  //         data={current}\n  //       />\n  //     );\n\n  //     // Proceed to the next message.\n  //     i += 1;\n  //   }\n\n  //   return messageList;\n  // }\n\n    return(\n      <div className=\"message-list\">\n        <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />,\n            // <button key=\"test\" onClick={getMessages}> hi </button>\n            // <ToolbarButton key=\"send\"  icon=\"ion-ios-call\" onClick={getMessages} />\n          ]}\n        />\n\n        {/* <div className=\"message-list-container\">{renderMessages()}</div> */}\n\n        <Compose rightItems={[\n          <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\" />,\n          <ToolbarButton key=\"image\" icon=\"ion-ios-image\" />,\n          <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\" />,\n          <ToolbarButton key=\"money\" icon=\"ion-ios-card\" />,\n          <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\" />,\n          <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\" />\n        ]}/>\n      </div>\n    );\n}\n\nexport default MessageList;"]},"metadata":{},"sourceType":"module"}