{"ast":null,"code":"import _taggedTemplateLiteral from \"/home/shell_basher/projects/mini-project-react/messenger-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/home/shell_basher/projects/mini-project-react/messenger-app/src/components/MessageList/index.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n\\n  query MyQuery{\\n    messages(where: {_or: [{id_receiver: {_eq: \\\"1\\\"}}, {id_sender: {_eq: \\\"1\\\"}}]}, order_by: {send_at: asc}) {\\n      text\\n    }\\n  }\\n \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect, useState } from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\nimport { gql, useQuery } from '@apollo/client';\nimport './MessageList.css';\nvar MY_USER_ID = 'apple'; // const GET_MY_MESSAGES = gql `\n//   query MyQuery ($id_receiver: String!, $id_sender: String!){\n//     messages(where: {_or: [{id_receiver: {_eq: $id_receiver}}, {id_sender: {_eq: $id_sender}}]}, order_by: {send_at: asc}) {\n//       text\n//     }\n//   }\n//  `;\n\nvar GET_MY_MESSAGES = gql(_templateObject());\n\nvar MessageList = function MessageList(props) {\n  var _useQuery = useQuery(GET_MY_MESSAGES),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  if (loading) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \" \", React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, \" Loading .. \"));\n  }\n\n  if (error) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \" \", React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \" Error \"), \" \", React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, \" \", error.message, \" \"), \" \");\n  } // const getMessages = async () => {\n  //    console.log(\"hi\");\n  //    const [addMessages] = useQuery(GET_MY_MESSAGES);\n  //    let messageList = addMessages({variables: {id_receiver: \"1\", id_sender: \"1\"}});\n  //    console.log(messageList);\n  //   //  var tempMessages = [\n  //   //     {\n  //   //       id: 1,\n  //   //       author: 'apple',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 2,\n  //   //       author: 'orange',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 3,\n  //   //       author: 'orange',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 4,\n  //   //       author: 'apple',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 5,\n  //   //       author: 'apple',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 6,\n  //   //       author: 'apple',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 7,\n  //   //       author: 'orange',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 8,\n  //   //       author: 'orange',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 9,\n  //   //       author: 'apple',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 10,\n  //   //       author: 'orange',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //   ]\n  //     setMessages([...messages, ...messageList]);\n  // }\n\n\n  var renderMessages = function renderMessages() {\n    var i = 0;\n    var messageCount = messages.length;\n    var messageList = [];\n\n    while (i < messageCount) {\n      var previous = messages[i - 1];\n      var current = messages[i];\n      var next = messages[i + 1];\n      var isMine = current.author === MY_USER_ID;\n      var currentMoment = moment(current.timestamp);\n      var prevBySameAuthor = false;\n      var nextBySameAuthor = false;\n      var startsSequence = true;\n      var endsSequence = true;\n      var showTimestamp = true;\n\n      if (previous) {\n        var previousMoment = moment(previous.timestamp);\n        var previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n\n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        var nextMoment = moment(next.timestamp);\n        var nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n\n      messageList.push(React.createElement(Message, {\n        key: i,\n        isMine: isMine,\n        startsSequence: startsSequence,\n        endsSequence: endsSequence,\n        showTimestamp: showTimestamp,\n        data: current,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      })); // Proceed to the next message.\n\n      i += 1;\n    }\n\n    return messageList;\n  };\n\n  return React.createElement(\"div\", {\n    className: \"message-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(Toolbar, {\n    title: \"Conversation Title\",\n    rightItems: [React.createElement(ToolbarButton, {\n      key: \"info\",\n      icon: \"ion-ios-information-circle-outline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"video\",\n      icon: \"ion-ios-videocam\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"phone\",\n      icon: \"ion-ios-call\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      key: \"test\",\n      onClick: getMessages,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, \" hi \") // <ToolbarButton key=\"send\"  icon=\"ion-ios-call\" onClick={getMessages} />\n    ],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"message-list-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, renderMessages()), React.createElement(Compose, {\n    rightItems: [React.createElement(ToolbarButton, {\n      key: \"photo\",\n      icon: \"ion-ios-camera\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"image\",\n      icon: \"ion-ios-image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"audio\",\n      icon: \"ion-ios-mic\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"money\",\n      icon: \"ion-ios-card\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"games\",\n      icon: \"ion-logo-game-controller-b\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192\n      },\n      __self: this\n    }), React.createElement(ToolbarButton, {\n      key: \"emoji\",\n      icon: \"ion-ios-happy\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    })],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }));\n};\n\nexport default MessageList;","map":{"version":3,"sources":["/home/shell_basher/projects/mini-project-react/messenger-app/src/components/MessageList/index.js"],"names":["React","useEffect","useState","Compose","Toolbar","ToolbarButton","Message","moment","gql","useQuery","MY_USER_ID","GET_MY_MESSAGES","MessageList","props","data","loading","error","message","renderMessages","i","messageCount","messages","length","messageList","previous","current","next","isMine","author","currentMoment","timestamp","prevBySameAuthor","nextBySameAuthor","startsSequence","endsSequence","showTimestamp","previousMoment","previousDuration","duration","diff","as","nextMoment","nextDuration","push","getMessages"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,aAAP,MAA0B,kBAA1B;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,SAASC,GAAT,EAAcC,QAAd,QAA8B,gBAA9B;AAEA,OAAO,mBAAP;AAEA,IAAMC,UAAU,GAAG,OAAnB,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEC,IAAMC,eAAe,GAAGH,GAAH,mBAArB;;AAQD,IAAMI,WAAW,GAAG,SAAdA,WAAc,CAAAC,KAAK,EAAI;AAAA,kBACIJ,QAAQ,CAACE,eAAD,CADZ;AAAA,MACpBG,IADoB,aACpBA,IADoB;AAAA,MACdC,OADc,aACdA,OADc;AAAA,MACLC,KADK,aACLA,KADK;;AAE3B,MAAID,OAAJ,EAAa;AACX,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAN,CAAR;AACD;;AACD,MAAIC,KAAJ,EAAW;AACT,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAN,OAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAKA,KAAK,CAACC,OAAX,MAAvB,MAAR;AACD,GAP0B,CAS3B;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,YAAY,GAAGC,QAAQ,CAACC,MAA5B;AACA,QAAIC,WAAW,GAAG,EAAlB;;AAEA,WAAOJ,CAAC,GAAGC,YAAX,EAAyB;AACvB,UAAII,QAAQ,GAAGH,QAAQ,CAACF,CAAC,GAAG,CAAL,CAAvB;AACA,UAAIM,OAAO,GAAGJ,QAAQ,CAACF,CAAD,CAAtB;AACA,UAAIO,IAAI,GAAGL,QAAQ,CAACF,CAAC,GAAG,CAAL,CAAnB;AACA,UAAIQ,MAAM,GAAGF,OAAO,CAACG,MAAR,KAAmBlB,UAAhC;AACA,UAAImB,aAAa,GAAGtB,MAAM,CAACkB,OAAO,CAACK,SAAT,CAA1B;AACA,UAAIC,gBAAgB,GAAG,KAAvB;AACA,UAAIC,gBAAgB,GAAG,KAAvB;AACA,UAAIC,cAAc,GAAG,IAArB;AACA,UAAIC,YAAY,GAAG,IAAnB;AACA,UAAIC,aAAa,GAAG,IAApB;;AAEA,UAAIX,QAAJ,EAAc;AACZ,YAAIY,cAAc,GAAG7B,MAAM,CAACiB,QAAQ,CAACM,SAAV,CAA3B;AACA,YAAIO,gBAAgB,GAAG9B,MAAM,CAAC+B,QAAP,CAAgBT,aAAa,CAACU,IAAd,CAAmBH,cAAnB,CAAhB,CAAvB;AACAL,QAAAA,gBAAgB,GAAGP,QAAQ,CAACI,MAAT,KAAoBH,OAAO,CAACG,MAA/C;;AAEA,YAAIG,gBAAgB,IAAIM,gBAAgB,CAACG,EAAjB,CAAoB,OAApB,IAA+B,CAAvD,EAA0D;AACxDP,UAAAA,cAAc,GAAG,KAAjB;AACD;;AAED,YAAII,gBAAgB,CAACG,EAAjB,CAAoB,OAApB,IAA+B,CAAnC,EAAsC;AACpCL,UAAAA,aAAa,GAAG,KAAhB;AACD;AACF;;AAED,UAAIT,IAAJ,EAAU;AACR,YAAIe,UAAU,GAAGlC,MAAM,CAACmB,IAAI,CAACI,SAAN,CAAvB;AACA,YAAIY,YAAY,GAAGnC,MAAM,CAAC+B,QAAP,CAAgBG,UAAU,CAACF,IAAX,CAAgBV,aAAhB,CAAhB,CAAnB;AACAG,QAAAA,gBAAgB,GAAGN,IAAI,CAACE,MAAL,KAAgBH,OAAO,CAACG,MAA3C;;AAEA,YAAII,gBAAgB,IAAIU,YAAY,CAACF,EAAb,CAAgB,OAAhB,IAA2B,CAAnD,EAAsD;AACpDN,UAAAA,YAAY,GAAG,KAAf;AACD;AACF;;AAEDX,MAAAA,WAAW,CAACoB,IAAZ,CACE,oBAAC,OAAD;AACE,QAAA,GAAG,EAAExB,CADP;AAEE,QAAA,MAAM,EAAEQ,MAFV;AAGE,QAAA,cAAc,EAAEM,cAHlB;AAIE,QAAA,YAAY,EAAEC,YAJhB;AAKE,QAAA,aAAa,EAAEC,aALjB;AAME,QAAA,IAAI,EAAEV,OANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EApCuB,CA+CvB;;AACAN,MAAAA,CAAC,IAAI,CAAL;AACD;;AAED,WAAOI,WAAP;AACD,GAzDD;;AA2DE,SACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,OAAD;AACE,IAAA,KAAK,EAAC,oBADR;AAEE,IAAA,UAAU,EAAE,CACV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,MAAnB;AAA0B,MAAA,IAAI,EAAC,oCAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADU,EAEV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,kBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFU,EAGV,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHU,EAIV;AAAQ,MAAA,GAAG,EAAC,MAAZ;AAAmB,MAAA,OAAO,EAAEqB,WAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJU,CAKV;AALU,KAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAYE;AAAK,IAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyC1B,cAAc,EAAvD,CAZF,EAcE,oBAAC,OAAD;AAAS,IAAA,UAAU,EAAE,CACnB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,gBAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADmB,EAEnB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,eAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFmB,EAGnB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHmB,EAInB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,cAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJmB,EAKnB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,4BAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALmB,EAMnB,oBAAC,aAAD;AAAe,MAAA,GAAG,EAAC,OAAnB;AAA2B,MAAA,IAAI,EAAC,eAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANmB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAdF,CADF;AAyBH,CAtKD;;AAwKA,eAAeN,WAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport Compose from '../Compose';\nimport Toolbar from '../Toolbar';\nimport ToolbarButton from '../ToolbarButton';\nimport Message from '../Message';\nimport moment from 'moment';\n\nimport { gql, useQuery } from '@apollo/client';\n\nimport './MessageList.css';\n\nconst MY_USER_ID = 'apple';\n\n// const GET_MY_MESSAGES = gql `\n\n//   query MyQuery ($id_receiver: String!, $id_sender: String!){\n//     messages(where: {_or: [{id_receiver: {_eq: $id_receiver}}, {id_sender: {_eq: $id_sender}}]}, order_by: {send_at: asc}) {\n//       text\n//     }\n//   }\n//  `;\n\n const GET_MY_MESSAGES = gql `\n\n  query MyQuery{\n    messages(where: {_or: [{id_receiver: {_eq: \"1\"}}, {id_sender: {_eq: \"1\"}}]}, order_by: {send_at: asc}) {\n      text\n    }\n  }\n `;\nconst MessageList = props => {\n  const {data, loading, error} = useQuery(GET_MY_MESSAGES);\n  if (loading) {\n    return (<div> <h1> Loading .. </h1></div>)\n  }\n  if (error) {\n    return (<div> <h1> Error </h1> <p> {error.message} </p> </div>)\n  }\n  \n  // const getMessages = async () => {\n\n  //    console.log(\"hi\");\n\n  //    const [addMessages] = useQuery(GET_MY_MESSAGES);\n  //    let messageList = addMessages({variables: {id_receiver: \"1\", id_sender: \"1\"}});\n\n  //    console.log(messageList);\n  //   //  var tempMessages = [\n  //   //     {\n  //   //       id: 1,\n  //   //       author: 'apple',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 2,\n  //   //       author: 'orange',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 3,\n  //   //       author: 'orange',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 4,\n  //   //       author: 'apple',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 5,\n  //   //       author: 'apple',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 6,\n  //   //       author: 'apple',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 7,\n  //   //       author: 'orange',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 8,\n  //   //       author: 'orange',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 9,\n  //   //       author: 'apple',\n  //   //       message: 'Hello world! This is a long message that will hopefully get wrapped by our message bubble component! We will see how well it works.',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //     {\n  //   //       id: 10,\n  //   //       author: 'orange',\n  //   //       message: 'It looks like it wraps exactly as it is supposed to. Lets see what a reply looks like!',\n  //   //       timestamp: new Date().getTime()\n  //   //     },\n  //   //   ]\n  //     setMessages([...messages, ...messageList]);\n  // }\n\n  const renderMessages = () => {\n    let i = 0;\n    let messageCount = messages.length;\n    let messageList = [];\n\n    while (i < messageCount) {\n      let previous = messages[i - 1];\n      let current = messages[i];\n      let next = messages[i + 1];\n      let isMine = current.author === MY_USER_ID;\n      let currentMoment = moment(current.timestamp);\n      let prevBySameAuthor = false;\n      let nextBySameAuthor = false;\n      let startsSequence = true;\n      let endsSequence = true;\n      let showTimestamp = true;\n\n      if (previous) {\n        let previousMoment = moment(previous.timestamp);\n        let previousDuration = moment.duration(currentMoment.diff(previousMoment));\n        prevBySameAuthor = previous.author === current.author;\n        \n        if (prevBySameAuthor && previousDuration.as('hours') < 1) {\n          startsSequence = false;\n        }\n\n        if (previousDuration.as('hours') < 1) {\n          showTimestamp = false;\n        }\n      }\n\n      if (next) {\n        let nextMoment = moment(next.timestamp);\n        let nextDuration = moment.duration(nextMoment.diff(currentMoment));\n        nextBySameAuthor = next.author === current.author;\n\n        if (nextBySameAuthor && nextDuration.as('hours') < 1) {\n          endsSequence = false;\n        }\n      }\n\n      messageList.push(\n        <Message\n          key={i}\n          isMine={isMine}\n          startsSequence={startsSequence}\n          endsSequence={endsSequence}\n          showTimestamp={showTimestamp}\n          data={current}\n        />\n      );\n\n      // Proceed to the next message.\n      i += 1;\n    }\n\n    return messageList;\n  }\n\n    return(\n      <div className=\"message-list\">\n        <Toolbar\n          title=\"Conversation Title\"\n          rightItems={[\n            <ToolbarButton key=\"info\" icon=\"ion-ios-information-circle-outline\" />,\n            <ToolbarButton key=\"video\" icon=\"ion-ios-videocam\" />,\n            <ToolbarButton key=\"phone\" icon=\"ion-ios-call\" />,\n            <button key=\"test\" onClick={getMessages}> hi </button>\n            // <ToolbarButton key=\"send\"  icon=\"ion-ios-call\" onClick={getMessages} />\n          ]}\n        />\n\n        <div className=\"message-list-container\">{renderMessages()}</div>\n\n        <Compose rightItems={[\n          <ToolbarButton key=\"photo\" icon=\"ion-ios-camera\" />,\n          <ToolbarButton key=\"image\" icon=\"ion-ios-image\" />,\n          <ToolbarButton key=\"audio\" icon=\"ion-ios-mic\" />,\n          <ToolbarButton key=\"money\" icon=\"ion-ios-card\" />,\n          <ToolbarButton key=\"games\" icon=\"ion-logo-game-controller-b\" />,\n          <ToolbarButton key=\"emoji\" icon=\"ion-ios-happy\" />\n        ]}/>\n      </div>\n    );\n}\n\nexport default MessageList;"]},"metadata":{},"sourceType":"module"}